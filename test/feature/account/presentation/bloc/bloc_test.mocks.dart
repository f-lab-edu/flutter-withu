// Mocks generated by Mockito 5.4.4 from annotations
// in withu_app/test/feature/account/presentation/bloc/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:withu_app/feature/account/account.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAccountRepository_0 extends _i1.SmartFake
    implements _i2.AccountRepository {
  _FakeAccountRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginResultEntity_1 extends _i1.SmartFake
    implements _i2.LoginResultEntity {
  _FakeLoginResultEntity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccountUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountUseCase extends _i1.Mock implements _i2.AccountUseCase {
  MockAccountUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AccountRepository get accountRepo => (super.noSuchMethod(
        Invocation.getter(#accountRepo),
        returnValue: _FakeAccountRepository_0(
          this,
          Invocation.getter(#accountRepo),
        ),
      ) as _i2.AccountRepository);

  @override
  _i3.Future<_i2.LoginResultEntity> login(
          {required _i2.LoginRequestEntity? entity}) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {#entity: entity},
        ),
        returnValue:
            _i3.Future<_i2.LoginResultEntity>.value(_FakeLoginResultEntity_1(
          this,
          Invocation.method(
            #login,
            [],
            {#entity: entity},
          ),
        )),
      ) as _i3.Future<_i2.LoginResultEntity>);

  @override
  _i3.Future<bool> checkLogin() => (super.noSuchMethod(
        Invocation.method(
          #checkLogin,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
